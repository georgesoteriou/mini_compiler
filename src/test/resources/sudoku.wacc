# Created by George Soteriou
#
# Sample puzzle
#
# 6 3 0 2 0 8 0 1 0
# 2 0 0 0 5 0 0 8 9
# 1 0 9 0 6 0 0 3 0
# 0 0 8 0 0 6 0 5 0
# 0 0 0 1 8 7 0 0 0
# 0 6 0 5 0 0 9 0 0
# 0 9 0 0 7 0 1 0 6
# 8 1 0 0 2 0 0 0 5
# 0 2 0 4 0 3 0 9 7
#
#

begin
  int[][] readPuzzle() is
    println "Insert your puzzle (81 numbers). Use 0 for blank squares:";
    int[] ar0 = [0,0,0,0,0,0,0,0,0];
    int[] ar1 = [0,0,0,0,0,0,0,0,0];
    int[] ar2 = [0,0,0,0,0,0,0,0,0];
    int[] ar3 = [0,0,0,0,0,0,0,0,0];
    int[] ar4 = [0,0,0,0,0,0,0,0,0];
    int[] ar5 = [0,0,0,0,0,0,0,0,0];
    int[] ar6 = [0,0,0,0,0,0,0,0,0];
    int[] ar7 = [0,0,0,0,0,0,0,0,0];
    int[] ar8 = [0,0,0,0,0,0,0,0,0];
    int[][] puzzle = [ar0, ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8];

    int i = 0;
    int j = 0;

    while i < 9 do
        j = 0;
        while j < 9 do
            int temp = 0;
            read temp;
            puzzle[i][j] = temp;
            j = j + 1
        done;
        i = i + 1
    done;

    return puzzle
  end

  int writePuzzle(int[][] puzzle) is
    println "Solution:";
    int i = 0;
    int j = 0;
    while i < 9 do
        j = 0;
        while j < 9 do
            print puzzle[i][j];
            print " ";
            j = j + 1
        done;
        println "";
        i = i + 1
    done;
    return 1
  end

  bool validXY(int x, int y, int[][] grid) is
    if grid[x][y] == 0 then
      return false
    else skip fi;
    int i = 0;
    int count = 0;
    while i < 9 do      
      if grid[x][i] == grid[x][y] then
        count = count + 1
      else skip fi;
      if grid[i][y] == grid[x][y] then
        count = count + 1
      else skip fi;
      int t1 = ((x/3) * 3) + i/3;
      int t2 = ((y/3) * 3) + i%3;
      if grid[t1][t2] == grid[x][y] then
        count = count + 1
      else skip fi;
      i = i + 1
    done;
    if count > 3 then
      return false
    else
      return true
    fi
  end

  bool validAll(int[][] grid) is
    int i = 0;
    int j = 0;
    bool v = true;
    while i < 9 do
      j = 0;
      while j < 9 do
        bool b = call validXY(i,j,grid);
        v = v && b;
        j = j + 1
      done;
      i = i + 1
    done;
    if v then
      return true
    else 
      return false
    fi
  end

  int[][] loop(int x, int y, int[][] grid) is
    int count = 0;
    bool v = call validAll(grid);
    bool f = false;
    while !v && !f do
      if count > 9 then
        grid[x][y] = 0;
        f = true
      else 
        if grid[x][y] < 9 then
          int tmp = grid[x][y];
          grid[x][y] = tmp + 1;
          count = count + 1
        else
          grid[x][y] = 0;
          count = count + 1
        fi;
        bool vxy = call validXY(x, y, grid);
        if vxy then
          grid = call solve(x, y, grid)
        else skip fi;
        v = call validAll(grid)
      fi
    done;
    return grid
  end

  int[][] solve(int x, int y, int[][] grid) is
    bool v = call validAll(grid);
    if v then
      return grid
    else skip fi;
    while grid[x][y] != 0 do
      if (x < 8) then
        x = x + 1
      else
        x = 0;
        y = y + 1
      fi
    done;
    int[][] ret = call loop(x, y, grid);
    return ret
  end

  int[][] puzzle = call readPuzzle();
  int[][] solved = call solve(0, 0, puzzle);
  int nun = call writePuzzle(solved)
end
